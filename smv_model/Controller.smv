--controller model
MODULE CONTROL(REQ,c1Home, c1End, c2Home, c2End, vcHome, vcEnd, pp1, pp2, pp3)
VAR
	_state : {state_0, state_1, state_2, state_3, state_4, state_5, state_6, state_7};
	CNF : boolean;
	c1Extend : boolean;
	c1Retract : boolean;
	c2Extend : boolean;
	c2Retract : boolean;
	vcExtend : boolean;
	vacuum_on : boolean;
	vacuum_off : boolean;
	vs : boolean;
	vac : boolean;

ASSIGN
	init(_state) := state_0;

--variable part of controller starts here--

next(_state) := case
	_state = state_0 : state_1;
	_state = state_1 & REQ & (c1End & pp1) : state_6;
	_state = state_2 & REQ & ((((!(vac) & (vcEnd | vcEnd)) | (vcEnd | vcEnd)) -> ((!(c2Home) & (vac | c2Home)) & !((c1Home & c2End)))) & (((pp2 | pp2) -> ((vcEnd | c1End) & (c1Home & pp3))) & (((c1Home | pp2) & (c1Home | c1Home)) | (!(c2End) & (vac | vac))))) : state_4;
	_state = state_3 & REQ & (((vcHome -> (vcEnd | vac)) -> (((vcHome & pp2) & (pp3 | c2End)) & !((vcHome | pp1)))) & (!(((vac & c2End) & !(c1Home))) & ((vac & vcEnd) & (vcHome -> (c1Home | vcEnd))))) : state_2;
	_state = state_4 & REQ & (pp1 & vcEnd) : state_6;
	_state = state_5 & REQ & (((c2Home | vcHome) -> ((vcEnd | c2Home) -> ((c1End & c2Home) & (!((c1Home | (c1End | pp1))) & vcEnd)))) | c2End) : state_4;
	_state = state_6 & REQ & (((!((c2Home & vcHome)) & !((c2Home | vcHome))) | (!((c1Home | pp2)) & !((c1Home & vcEnd)))) & ((((pp1 & pp2) | (c2End & vcEnd)) & ((vcHome | pp1) | (c1Home & vcHome))) & ((c2Home & c1Home) -> (!((c2End | pp2)) & (vcHome & vcHome))))) : state_5;
	_state = state_7 & REQ & ((!((vcEnd | vac)) & ((pp2 & c2Home) | (vcEnd & c2Home))) | ((vac & pp2) -> (vcEnd & c1Home))) : state_2;
	_state = state_6 & REQ & (!(vac) & (c2Home | vcHome)) : state_3;
	_state = state_2 & REQ & (c1End -> (c2Home & c1Home)) : state_7;
	_state = state_2 & REQ & ((!(vcEnd) & (pp1 & vac)) | ((vcHome & c2End) & (vac & c2End))) : state_1;
	_state = state_6 & REQ & ((pp2 & vcEnd) -> !((c1End -> (c2Home & c1End)))) : state_1;
TRUE : _state;
esac;
 
next(CNF) := case
	_state = state_1 & REQ & next(_state) = state_6 & (c1End & pp1): TRUE;
	_state = state_2 & REQ & next(_state) = state_4 & ((((!(vac) & (vcEnd | vcEnd)) | (vcEnd | vcEnd)) -> ((!(c2Home) & (vac | c2Home)) & !((c1Home & c2End)))) & (((pp2 | pp2) -> ((vcEnd | c1End) & (c1Home & pp3))) & (((c1Home | pp2) & (c1Home | c1Home)) | (!(c2End) & (vac | vac))))): TRUE;
	_state = state_3 & REQ & next(_state) = state_2 & (((vcHome -> (vcEnd | vac)) -> (((vcHome & pp2) & (pp3 | c2End)) & !((vcHome | pp1)))) & (!(((vac & c2End) & !(c1Home))) & ((vac & vcEnd) & (vcHome -> (c1Home | vcEnd))))): TRUE;
	_state = state_4 & REQ & next(_state) = state_6 & (pp1 & vcEnd): TRUE;
	_state = state_5 & REQ & next(_state) = state_4 & (((c2Home | vcHome) -> ((vcEnd | c2Home) -> ((c1End & c2Home) & (!((c1Home | (c1End | pp1))) & vcEnd)))) | c2End): TRUE;
	_state = state_6 & REQ & next(_state) = state_5 & (((!((c2Home & vcHome)) & !((c2Home | vcHome))) | (!((c1Home | pp2)) & !((c1Home & vcEnd)))) & ((((pp1 & pp2) | (c2End & vcEnd)) & ((vcHome | pp1) | (c1Home & vcHome))) & ((c2Home & c1Home) -> (!((c2End | pp2)) & (vcHome & vcHome))))): TRUE;
	_state = state_7 & REQ & next(_state) = state_2 & ((!((vcEnd | vac)) & ((pp2 & c2Home) | (vcEnd & c2Home))) | ((vac & pp2) -> (vcEnd & c1Home))): TRUE;
	_state = state_6 & REQ & next(_state) = state_3 & (!(vac) & (c2Home | vcHome)): TRUE;
	_state = state_2 & REQ & next(_state) = state_7 & (c1End -> (c2Home & c1Home)): TRUE;
	_state = state_2 & REQ & next(_state) = state_1 & ((!(vcEnd) & (pp1 & vac)) | ((vcHome & c2End) & (vac & c2End))): TRUE;
	_state = state_6 & REQ & next(_state) = state_1 & ((pp2 & vcEnd) -> !((c1End -> (c2Home & c1End)))): TRUE;
TRUE : FALSE;
esac;
 
init(c1Extend) := FALSE;

next(c1Extend) := case
	FALSE | next(_state) = state_2  : TRUE;
 	FALSE | next(_state) = state_0 | next(_state) = state_3 | next(_state) = state_4 | next(_state) = state_6 | next(_state) = state_7  : FALSE;
 	TRUE :c1Extend;
esac;
 
init(c1Retract) := FALSE;

next(c1Retract) := case
	FALSE | next(_state) = state_1 | next(_state) = state_3 | next(_state) = state_4 | next(_state) = state_7  : TRUE;
 	FALSE | next(_state) = state_0 | next(_state) = state_2 | next(_state) = state_5 | next(_state) = state_6  : FALSE;
 	TRUE :c1Retract;
esac;
 
init(c2Extend) := FALSE;

next(c2Extend) := case
	FALSE | next(_state) = state_5  : TRUE;
 	FALSE | next(_state) = state_0 | next(_state) = state_1 | next(_state) = state_2  : FALSE;
 	TRUE :c2Extend;
esac;
 
init(c2Retract) := FALSE;

next(c2Retract) := case
	FALSE | next(_state) = state_5 | next(_state) = state_7  : TRUE;
 	FALSE | next(_state) = state_0  : FALSE;
 	TRUE :c2Retract;
esac;
 
init(vcExtend) := FALSE;

next(vcExtend) := case
	FALSE | next(_state) = state_7  : TRUE;
 	FALSE | next(_state) = state_0 | next(_state) = state_2 | next(_state) = state_3  : FALSE;
 	TRUE :vcExtend;
esac;
 
init(vacuum_on) := FALSE;

next(vacuum_on) := case
	FALSE | next(_state) = state_2 | next(_state) = state_4 | next(_state) = state_5 | next(_state) = state_7  : TRUE;
 	FALSE | next(_state) = state_0 | next(_state) = state_1  : FALSE;
 	TRUE :vacuum_on;
esac;
 
init(vacuum_off) := FALSE;

next(vacuum_off) := case
	FALSE | next(_state) = state_4 | next(_state) = state_5  : TRUE;
 	FALSE | next(_state) = state_0 | next(_state) = state_1 | next(_state) = state_3 | next(_state) = state_7  : FALSE;
 	TRUE :vacuum_off;
esac;
 

--variable part of controller ends here--

init(vs) := FALSE;
next(vs) := case
	next(CNF) & next(vacuum_on) : TRUE;
	next(CNF) & next(vacuum_off) : FALSE;
	next(CNF) & !next(vacuum_on) : FALSE;
	TRUE : vs;
esac;

init(vac) := FALSE;
next(vac) := case
	next(vp1) | next(vp2) | next(vp3) : TRUE;
	!next(vs) : FALSE;
	TRUE : vac;
esac;

DEFINE
    vp1 := c1End & c2Home & vcEnd & vs & pp1;
    vp2 := c1Home & c2End & vcEnd & vs & pp2;
    vp3 := c1End & c2End & vcEnd & vs & pp3;


--Plant model
MODULE PLANT(CNF, c1Extend, c1Retract, c2Extend, c2Retract, vcExtend, vacuum_on, vacuum_off)
VAR
    c1Home : boolean;
    c1End : boolean;
    c2Home : boolean;
    c2End : boolean;
    vcHome : boolean;
    vcEnd : boolean;
    st1 : { st1_1, st1_2, st1_3, st1_4, st1_5, st1_6};
    st2 : { st2_1, st2_2, st2_3, st2_4, st2_5, st2_6};
    st3 : { st3_1, st3_2, st3_3, st3_4, st3_5, st3_6};
ASSIGN

init(st1) := st1_1;
next(st1) := case
    st1 = st1_1 & next(CNF & c1Extend) : st1_2;
    st1 = st1_2 & next(CNF & c1Retract) : st1_1;
    st1 = st1_2 & next(c1Extend) : st1_3;
    st1 = st1_3 & next(CNF & c1Retract) : st1_4;
    st1 = st1_4 & next(CNF & c1Extend) : st1_3;
    st1 = st1_4 & next(c1Retract) : st1_1;
    TRUE : st1;
esac;

c1Home := st1 = st1_1;
c1End := st1 = st1_3;

init(st2) := st2_1;
next(st2) := case
    st2 = st2_1 & next(CNF & c2Extend) : st2_2;
    st2 = st2_2 & next(CNF & c2Retract) : st2_1;
    st2 = st2_2 & next(c2Extend) : st2_3;
    st2 = st2_3 & next(CNF & c2Retract) : st2_4;
    st2 = st2_4 & next(CNF & c2Extend) : st2_3;
    st2 = st2_4 & next(c2Retract) : st2_1;
    TRUE : st2;
esac;

c2Home := st2 = st2_1;
c2End := st2 = st2_3;


init(st3) := st3_1;
next(st3) := case
    next(CNF & vcExtend) & st3 = st3_1 : st3_2;
    next(vcExtend) & st3 = st3_2 : st3_5;
    next(vcExtend) & st3 = st3_5 : st3_4;
    next(CNF & vcExtend) & st3 = st3_3 : st3_4;
    next(CNF & !vcExtend) & st3 = st3_2 : st3_1;
    next(!vcExtend) & st3 = st3_3 : st3_6;
    next(!vcExtend) & st3 = st3_6 : st3_1;
    next(CNF & !vcExtend) & st3 = st3_4 : st3_3;
    TRUE : st3;
esac;

vcHome := st3 = st3_1 | st3 = st3_2;
vcEnd := st3 = st3_3 | st3 = st3_4;



-- additional predicates, environment modeling
MODULE main()
VAR
    REQ : boolean;
    pp1 : boolean;
    pp2 : boolean;
    pp3 : boolean;
    vac : boolean;
    CNF : boolean;
    vs : boolean;
    p1 : boolean;
    p2 : boolean;
    p3 : boolean;
    lifted : boolean;

    C : CONTROL(REQ, P.c1Home, P.c1End, P.c2Home, P.c2End, P.vcHome, P.vcEnd, pp1, pp2, pp3);
    P : PLANT(C.CNF, C.c1Extend, C.c1Retract, C.c2Extend, C.c2Retract, C.vcExtend, C.vacuum_on, C.vacuum_off);

ASSIGN

REQ := TRUE;
p2 := FALSE;
p3 := FALSE;


init(pp1) := FALSE;
next(pp1) := case
    C.vp1 : FALSE;
    pp1 : TRUE;
    TRUE : p1;
esac;

init(pp2) := FALSE;
next(pp2) := case
    C.vp2 : FALSE;
    pp2 : TRUE;
    TRUE : p2;
esac;

init(pp3) := FALSE;
next(pp3) := case
    C.vp3 : FALSE;
    pp3 : TRUE;
    TRUE : p3;
esac;

init(lifted) := FALSE;
next(lifted) := case
    C.vp1 : TRUE;
    dropped : FALSE;
    TRUE : lifted;
esac;

DEFINE
    dropped := lifted & P.c1Home & P.c2Home & P.vcEnd & !C.vacuum_on & C.vacuum_off;



--specification
