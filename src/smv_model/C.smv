
--variable part of controller ends here--

init(vs) := FALSE;
next(vs) := case
	next(CNF) & next(vacuum_on) : TRUE;
	next(CNF) & next(vacuum_off) : FALSE;
	next(CNF) & !next(vacuum_on) : FALSE;
	TRUE : vs;
esac;

init(vac) := FALSE;
next(vac) := case
	next(vp1) | next(vp2) | next(vp3) : TRUE;
	!next(vs) : FALSE;
	TRUE : vac;
esac;

DEFINE
    vp1 := c1End & c2Home & vcEnd & vs & pp1;
    vp2 := c1Home & c2End & vcEnd & vs & pp2;
    vp3 := c1End & c2End & vcEnd & vs & pp3;


--Plant model
MODULE PLANT(CNF, c1Extend, c1Retract, c2Extend, c2Retract, vcExtend, vacuum_on, vacuum_off)
VAR
    c1Home : boolean;
    c1End : boolean;
    c2Home : boolean;
    c2End : boolean;
    vcHome : boolean;
    vcEnd : boolean;
    st1 : { st1_1, st1_2, st1_3, st1_4, st1_5, st1_6};
    st2 : { st2_1, st2_2, st2_3, st2_4, st2_5, st2_6};
    st3 : { st3_1, st3_2, st3_3, st3_4, st3_5, st3_6};
ASSIGN

init(st1) := st1_1;
next(st1) := case
    st1 = st1_1 & next(CNF & c1Extend) : st1_2;
    st1 = st1_2 & next(CNF & c1Retract) : st1_1;
    st1 = st1_2 & next(c1Extend) : st1_3;
    st1 = st1_3 & next(CNF & c1Retract) : st1_4;
    st1 = st1_4 & next(CNF & c1Extend) : st1_3;
    st1 = st1_4 & next(c1Retract) : st1_1;
    TRUE : st1;
esac;

c1Home := st1 = st1_1;
c1End := st1 = st1_3;

init(st2) := st2_1;
next(st2) := case
    st2 = st2_1 & next(CNF & c2Extend) : st2_2;
    st2 = st2_2 & next(CNF & c2Retract) : st2_1;
    st2 = st2_2 & next(c2Extend) : st2_3;
    st2 = st2_3 & next(CNF & c2Retract) : st2_4;
    st2 = st2_4 & next(CNF & c2Extend) : st2_3;
    st2 = st2_4 & next(c2Retract) : st2_1;
    TRUE : st2;
esac;

c2Home := st2 = st2_1;
c2End := st2 = st2_3;


init(st3) := st3_1;
next(st3) := case
    next(CNF & vcExtend) & st3 = st3_1 : st3_2;
    next(vcExtend) & st3 = st3_2 : st3_5;
    next(vcExtend) & st3 = st3_5 : st3_4;
    next(CNF & vcExtend) & st3 = st3_3 : st3_4;
    next(CNF & !vcExtend) & st3 = st3_2 : st3_1;
    next(!vcExtend) & st3 = st3_3 : st3_6;
    next(!vcExtend) & st3 = st3_6 : st3_1;
    next(CNF & !vcExtend) & st3 = st3_4 : st3_3;
    TRUE : st3;
esac;

vcHome := st3 = st3_1 | st3 = st3_2;
vcEnd := st3 = st3_3 | st3 = st3_4;



-- additional predicates, environment modeling
MODULE main()
VAR
    REQ : boolean;
    pp1 : boolean;
    pp2 : boolean;
    pp3 : boolean;
    vac : boolean;
    CNF : boolean;
    vs : boolean;
    p1 : boolean;
    p2 : boolean;
    p3 : boolean;
    lifted : boolean;

    C : CONTROL(REQ, P.c1Home, P.c1End, P.c2Home, P.c2End, P.vcHome, P.vcEnd, pp1, pp2, pp3);
    P : PLANT(C.CNF, C.c1Extend, C.c1Retract, C.c2Extend, C.c2Retract, C.vcExtend, C.vacuum_on, C.vacuum_off);

ASSIGN

REQ := TRUE;
p2 := FALSE;
p3 := FALSE;


init(pp1) := FALSE;
next(pp1) := case
    C.vp1 : FALSE;
    pp1 : TRUE;
    TRUE : p1;
esac;

init(pp2) := FALSE;
next(pp2) := case
    C.vp2 : FALSE;
    pp2 : TRUE;
    TRUE : p2;
esac;

init(pp3) := FALSE;
next(pp3) := case
    C.vp3 : FALSE;
    pp3 : TRUE;
    TRUE : p3;
esac;

init(lifted) := FALSE;
next(lifted) := case
    C.vp1 : TRUE;
    dropped : FALSE;
    TRUE : lifted;
esac;

DEFINE
    dropped := lifted & P.c1Home & P.c2Home & P.vcEnd & !C.vacuum_on & C.vacuum_off;



--specification